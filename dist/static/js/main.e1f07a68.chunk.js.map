{"version":3,"sources":["components/getdataLoc.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Getdata","useState","responseData","setResponseData","setGeo","fetchdata","navigator","geolocation","getCurrentPosition","position","urlLoctation","coords","latitude","longitude","axios","get","then","res","temp","data","ex_data","aqi","require","x","from","to","getdata","document","body","style","background","colorbg","city","name","geo","time","s","Air_pollution_level","Health_Implications","PM25","dark_color","mid_color","jsondata","catch","error","useEffect","className","Airlevel","alert","alert_tip","Date","acctime","toDateString","toLocaleTimeString","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e1f07a68.chunk.js","sourcesContent":["\nimport {useState,useEffect} from 'react'\nimport axios from 'axios'\nimport './getdataLoc.css'\nimport './aq_index.json'\n\n\n\nconst Getdata =  () => {\n\n\n\n  const TOKEN = \"ed34834cd666ba4bbd44a9c7d6cbc51b371fa443\"\n  const [responseData,setResponseData]=useState({\"alldata\": null,\"city\":\"turn on location and reload!\",\"aqi\" :\"AQI\",\"location\" :null,\"Airlevel\":\"Air Quality\",\n  \"alert\":\"Health Implications\",\n  \"alert_tip\":\"Cautionary Statement (for PM2.5)\",\n  \"color_bg\":\"white\",\n  \"dark_color\":\"white\",\n  \"mid_color\":\"white\"});\n  const [,setGeo]=useState({\"latitude\":null,\"longitude\":null,\"status\":null})\n  // begging for location permission\n\n\n\n\n// json helper\nconst getdata =(aqi)=>{\n  const data = require('./aq_index.json');\n  // console.log(aqi,\"here\")\n  for(var x in data){\n    if(data[x].from<=aqi && data[x].to >=aqi)\n      return(data[x])\n  }\n}\n\n\n\n\n// api request \n  const fetchdata = ()=>{\n    if(navigator.geolocation)\n        {\n          navigator.geolocation.getCurrentPosition( function(position){\n\n            // console.log(position)\n            const urlLoctation = `https://api.waqi.info/feed/geo:${position.coords.latitude};${position.coords.longitude}/?token=${TOKEN}`;\n            axios.get(urlLoctation).then(res=>{\n              // console.log(\"location script\")\n              const temp =res.data.data\n              const ex_data=getdata(temp.aqi)\n              document.body.style.background=ex_data.colorbg\n              const jsondata ={\"alldata\": temp,\n                              \"city\":temp.city.name,\n                                \"aqi\" :temp.aqi,\n                                \"location_co\" :temp.city.geo,\n                                \"acctime\":temp.time.s,\n                                \"Airlevel\":ex_data.Air_pollution_level,\n                                \"alert\":ex_data.Health_Implications,\n                                \"alert_tip\":ex_data.PM25,\n                                \"color_bg\":ex_data.colorbg,\n                                \"dark_color\":ex_data.dark_color,\n                                \"mid_color\":ex_data.mid_color,\n                              }\n            return jsondata\n            }).then((jsondata)=>{\n              setResponseData(jsondata)\n              setGeo({\"latitude\":position.coords.latitude,\"longitude\":position.coords.longitude,\"status\":true})\n              // console.log(geoL)\n            }).catch(error=>{\n              // console.log(error)\n            })\n          })\n      }\n    else{\n      setGeo({\"latitude\":null,\"longitude\":null,\"status\":false})\n    }\n  }\n\n\n\n\n  useEffect(()=>{\n  // other code\n    fetchdata()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  return (\n    <div className=\"container center\">\n        <div className=\"location-name center\">\n          <div className=\"city-name\"><i className=\"material-icons\">near_me</i> {responseData.city}</div>\n        </div>\n\n            <div className=\"aqindex\">{responseData.aqi}</div>\n            <div className=\"air_p_level\">{responseData.Airlevel}</div>\n\n\n            <div className=\"line center\" style={{\"backgroundColor\":responseData.mid_color}} ></div>\n\n            <div className=\"row\">\n              <div className=\"col s4\"><i className=\" material-icons icons\" style={{\"color\":responseData.dark_color}}>warning</i></div>\n                <div className=\"col s8\">\n                  <p className=\"flow-text tips\" >{responseData.alert}</p>\n                </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col s4\"><i className=\"rotate material-icons icons\" style={{\"color\":responseData.dark_color}} >wb_incandescent</i></div>\n                <div className=\"col s8\">\n                  <p className=\"flow-text tips\" >{responseData.alert_tip}</p>\n                </div>\n            </div>\n\n\n            <div className=\"line center\" style={{\"backgroundColor\":responseData.mid_color}}></div>\n\n        <div className=\"time_iso\">Last Updated {new Date(responseData.acctime).toDateString()} {new Date(responseData.acctime).toLocaleTimeString()}</div>\n         {/* <h2>aqi location {JSON.stringify(responseData)}</h2> */}\n\n    </div>\n\n   );\n}\n\nexport default Getdata;\n\n","import './App.css';\nimport Getdata from './components/getdataLoc'\nfunction App() {\n  return (\n    <div className=\"App\">\n\n\n        \n      <div className=\"content\">\n        <Getdata/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}